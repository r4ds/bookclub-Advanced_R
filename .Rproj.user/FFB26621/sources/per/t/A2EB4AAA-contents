---
title: "R4DS Questions From Advanced R"
output:
  html_document:
    toc: true
    toc_float: true
    css: styles.css
---

A companion to [Advanced R](https://adv-r.hadley.nz/rcpp.html#acknowledgments) and suppliment to [Advanced R Solutions](https://advanced-r-solutions.rbind.io/names-and-values.html#copy-on-modify)

```{r, echo=FALSE}
htmltools::img(src = knitr::image_uri("r4ds.png"), 
               alt = 'logo', 
               style = 'position:absolute; top:0; 
                        right:0;
                        padding:0;
                        width: 25%;
               height 25%')
```

# Chapter 2 

## 2.3 Copy-on-modify 

:::question
copy-on-modify vs copy-in-place: is one more preferable in certain situations?
:::

XXX

## 2.3.2 Function calls

:::question
Can we go over and break down figure in 2.3.2
:::

XXX

## 2.3.3 Lists

:::question
When would you prefer a deep copy of a list to a shallow copy? Is this something to consider when writing functions or package development or is this more something that's optimized behind the scenes?
:::

XXX

## 2.3.5 Character vectors


:::question
What exactly is the "global string pool" and what does `ref()` show us?
:::

XXX

## 2.4.1 Object size


:::question
I understand that `ALTREP` makes the size of `obj_size(1:3) == obj_size(1:100)` but do I need to have a better grasp than that? [Should we go over this](https://blog.revolutionanalytics.com/2017/09/altrep-preview.html)
:::

XXX

## 2.5.1 Modify-in-place

:::question
"When it comes to bindings, R can currently7 only count 0, 1, or many. That means that if an object has two bindings, and one goes away, the reference count does not go back to 1: one less than many is still many. In turn, this means that R will make copies when it sometimes doesnâ€™t need to."

Can we come up with an example of this? It seems really theoretical right now.
:::

XXX

:::question
Can we break down this code diagrammatically? I'd like to really solidify why it's copying three times per loop.
```{r}
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))
for (i in seq_along(medians)) {
  x[[i]] <- x[[i]] - medians[[i]]
}
```
:::

XXX