[
["preface.html", "Advanced R Companion Chapter 1 Preface", " Advanced R Companion R4DS Reading Group 2020-05-01 Chapter 1 Preface A companion to Advanced R and supplement to Advanced R Solutions "],
["names-and-values.html", "Chapter 2 Names and Values 2.3 Copy-on-modify 2.2.2 Exercises 2.3.2 Function calls 2.3.3 Lists 2.3.5 Character vectors 2.3.6.2 Exercise 2.4.1 Object size 2.5.1 Modify-in-place", " Chapter 2 Names and Values 2.3 Copy-on-modify copy-on-modify vs copy-in-place: is one more preferable in certain situations? modify in place only happens when objects with a single binding get a special performance optimization and to environments. 2.2.2 Exercises Question 3 digs into the syntactically valid names created when using read.csv(), but what is the difference between quotation and backticks? If we create an example csv example2223 &lt;- tibble( `if` = c(1,2,3), `_1234` = c(4,5,6), `column 1` = c(7,8,9) ) write.csv(example2223, &quot;example2223.csv&quot;, row.names = FALSE) Import using adjusted column names to be syntactically valid: read.csv(file = &quot;example2223.csv&quot;,check.names = TRUE) ## if. X_1234 column.1 ## 1 1 4 7 ## 2 2 5 8 ## 3 3 6 9 Import using non-adjusted column names read.csv(file = &quot;example2223.csv&quot;, check.names = FALSE) ## if _1234 column 1 ## 1 1 4 7 ## 2 2 5 8 ## 3 3 6 9 Import using the tidyverse where names are not adjusted df_non_syntactic_name &lt;- read_csv(file = &quot;example2223.csv&quot;) ## Parsed with column specification: ## cols( ## `if` = col_double(), ## `_1234` = col_double(), ## `column 1` = col_double() ## ) However I really don´t understand the difference between backticks and quotation marks. For example when I select a column in the case of non-syntactic in the tidyverse I can use quotation marks or backticks df_non_syntactic_name %&gt;% select(&quot;if&quot;) ## # A tibble: 3 x 1 ## `if` ## &lt;dbl&gt; ## 1 1 ## 2 2 ## 3 3 df_non_syntactic_name %&gt;% select(`if`) But in base R, I can do this with quotation marks, but not backticks: df__non_syntactic_name[&quot;if&quot;] Error in `[.default`(df__non_syntactic_name, `if`) : invalid subscript type &#39;special&#39; According to ?Quotes backticks are used for “non-standard variable names” but why in base R they don´t work to select columns but in the tidyverse they work to select variables? The easiest way to think about this is that backticks refer to objects while quotation marks refer to strings. dplyr::select() accepts object references as well as string references, while base R subsetting is done with a string or integer position. 2.3.2 Function calls Can we go over and break down figure in 2.3.2 When you create this function: crazyfunction &lt;- function(eh) {eh} eh doesn’t exist in memory at this point. x &lt;- c(1,2,3) x exists in memory. z &lt;- crazyfunction(x) z now points at x, and eh still doesn’t exist (except metaphorically in Canada). eh was created and exists WHILE crazyfunction() was being run, but doesn’t get saved to the global environment, so after the function is run you can’t see its memory reference. The round brackets (eh) list the arguments, the curly brackets {eh} define the operation that it’s doing - and you’re assigning it to crazyfunction. R functions automatically return the result of the last expression so when you call that object (the argument eh) it returns the value of that argument. This is called implicit returns 2.3.3 Lists Checking the address for a list and its copy we see they share the same references: l1 &lt;- list(1,2,3) l2 &lt;- l1 identical(lobstr::ref(l1),lobstr::ref(l2)) ## [1] TRUE lobstr::obj_addr(l1[[1]]) ## [1] &quot;0x7fd026bd5040&quot; lobstr::obj_addr(l2[[1]]) ## [1] &quot;0x7fd026bd5040&quot; But why isn’t this the case for their subsets? Using obj_addr they have different addresses, but when we look at their references they are the same lobstr::obj_addr(l1[1]) ## [1] &quot;0x7fd0231622f8&quot; lobstr::ref(l1[1]) ## █ [1:0x7fd02018b870] &lt;list&gt; ## └─[2:0x7fd026bd5040] &lt;dbl&gt; lobstr::obj_addr(l2[1]) ## [1] &quot;0x7fd020322ff8&quot; identical(lobstr::obj_addr(l1[1]), lobstr::obj_addr(l2[1])) ## [1] FALSE This is because using singular brackets wraps the value 1 in a new list that is created on the fly which will have a unique address. We can use double brackets to confirm our mental model that the sublists are also identical: identical(lobstr::obj_addr(l1[[1]]), lobstr::obj_addr(l2[[1]])) ## [1] TRUE What’s the difference between these 2 addresses &lt;0x55d53fa975b8&gt; and 0x55d53fa975b8? Nothing - it has to do with the printing method: x &lt;- c(1, 2, 3) print(tracemem(x)) ## [1] &quot;&lt;0x7fd0202c1c78&gt;&quot; cat(tracemem(x)) ## &lt;0x7fd0202c1c78&gt; lobstr::obj_addr(x) ## [1] &quot;0x7fd0202c1c78&quot; When would you prefer a deep copy of a list to a shallow copy? Is this something to consider when writing functions or package development or is this more something that’s optimized behind the scenes? Automagical! 2.3.5 Character vectors Is there a way to clear the “global string pool”? According to this post it doesn’t look like you can directly, but clearing all references to a string that’s in the global string pool clears that string from the pool, eventually 2.3.6.2 Exercise When we look at tracemem when we modify x from an integer to numeric, x is assigned to three objects. The first is the integer, and the third numeric - so what’s the intermediate type? x &lt;- c(1L, 2L, 3L) obj_addr(x) tracemem(x) x[[3]] &lt;- 4 [1] &quot;0x7f84b7fe2c88&quot; [1] &quot;&lt;0x7f84b7fe2c88&gt;&quot; tracemem[0x7f84b7fe2c88 -&gt; 0x7f84b7fe5288]: tracemem[0x7f84b7fe5288 -&gt; 0x7f84bc0817c8]: What is 0x7f84b7fe5288 when the intermediate x &lt;- c(1L, 2L, 4) is impossible? When we assign the new value as an integer there is no intermediate step. This probably means c(1,2, NA) is the intermediate step; creating an intermediate vector that’s the same length of the final product with NA values at all locations that are new or to be changed x &lt;- c(1L, 2L, 3L) obj_addr(x) ## [1] &quot;0x7fd02732ef88&quot; tracemem(x) ## [1] &quot;&lt;0x7fd02732ef88&gt;&quot; x[[3]] &lt;- 4L ## tracemem[0x7fd02732ef88 -&gt; 0x7fd02732ad48]: eval eval withVisible withCallingHandlers handle timing_fn evaluate_call &lt;Anonymous&gt; evaluate in_dir block_exec call_block process_group.block process_group withCallingHandlers process_file &lt;Anonymous&gt; &lt;Anonymous&gt; render_cur_session render_book FUN lapply unlist render_book render_book_script in_dir &lt;Anonymous&gt; &lt;Anonymous&gt; You can dig into the C code running this: pryr::show_c_source(.Internal(&quot;[&lt;-&quot;)) 2.4.1 Object size If I have two vectors, one 1:10 and another c(1:10, 10), intuitively, I would expect the size of the second vector to be greater than the size of the first. However, it seems to be the other way round, why? x1 &lt;- 1:10 x2 &lt;- rep(1:10, 10) lobstr::obj_size(x1) ## 680 B lobstr::obj_size(x2) ## 448 B If we start with the following three vectors: x1 &lt;- c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L) x2 &lt;- 1:10 x3 &lt;- rep(1:10, 10) lobstr::obj_sizes(x1, x2, x3) ## * 96 B ## * 680 B ## * 448 B Intuitively, we would have expected x1 &lt; x2 &lt; x3 but this is not the case. It appears that the rep() function coerces a double into integer and hence optimizes on space. Using :, R internally uses ALTREP. ALTREP would actually be more efficient if the numbers represented were significantly large, say 1e7. x4 &lt;- 1:1e7 x5 &lt;- x4 x5[1] &lt;- 1L lobstr::obj_sizes(x4, x5) ## * 680 B ## * 40,000,048 B Now, the size of x4 is significantly lower than that of x5 . This seems to indicate that ALTREP becomes super efficient as the vector size is increased. 2.5.1 Modify-in-place “When it comes to bindings, R can currently only count 0, 1, or many. That means that if an object has two bindings, and one goes away, the reference count does not go back to 1: one less than many is still many. In turn, this means that R will make copies when it sometimes doesn’t need to.” Can we come up with an example of this? It seems really theoretical right now. First you need to switch your Environment tab to something other than global in RStudio! Now we can create a vector: v &lt;- c(1, 2, 3) (old_address &lt;- lobstr::obj_addr(v)) ## [1] &quot;0x7fd028b11598&quot; Changing a value within it changes its address: v[[3]] &lt;- 4 (new_address &lt;- lobstr::obj_addr(v)) ## [1] &quot;0x7fd028cee828&quot; old_address == new_address ## [1] FALSE We can assign the modified vector to a new name, where y and v point to the same thing. y &lt;- v (y_address &lt;- lobstr::obj_addr(y)) ## [1] &quot;0x7fd028cee828&quot; (v_address &lt;- lobstr::obj_addr(v)) ## [1] &quot;0x7fd028cee828&quot; y_address == v_address ## [1] TRUE Now if we modify v it won’t point to the same thing as y: v[[3]] &lt;- 3 (y_address &lt;- lobstr::obj_addr(y)) ## [1] &quot;0x7fd028cee828&quot; (v_address &lt;- lobstr::obj_addr(v)) ## [1] &quot;0x7fd02922db88&quot; y_address == v_address ## [1] FALSE But if we now change y to look like v, the original address, in theory editing y should occur in place, but it doesn’t - the “count does not go back to one”! y[[3]] &lt;- 3 (new_y_address &lt;- lobstr::obj_addr(y)) ## [1] &quot;0x7fd0294cc558&quot; new_y_address == y_address ## [1] FALSE Can we break down this code a bit more? I’d like to really understand when and how it’s copying three times. # dataframe of 5 columns of numbers x &lt;- data.frame(matrix(runif(5 * 1e4), ncol = 5)) # median number for each column medians &lt;- vapply(x, median, numeric(1)) # subtract the median of each column from each value in the column for (i in seq_along(medians)) { x[[i]] &lt;- x[[i]] - medians[[i]] } cat(tracemem(x), &quot;\\n&quot;) &lt;0x7fdc99a6f9a8&gt; for (i in 1:5) { x[[i]] &lt;- x[[i]] - medians[[i]] } tracemem[0x7fdc99a6f9a8 -&gt; 0x7fdc9de83e38]: tracemem[0x7fdc9de83e38 -&gt; 0x7fdc9de83ea8]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de83ea8 -&gt; 0x7fdc9de83f18]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de83f18 -&gt; 0x7fdc9de83f88]: tracemem[0x7fdc9de83f88 -&gt; 0x7fdc9de83ff8]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de83ff8 -&gt; 0x7fdc9de84068]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de84068 -&gt; 0x7fdc9de840d8]: tracemem[0x7fdc9de840d8 -&gt; 0x7fdc9de84148]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de84148 -&gt; 0x7fdc9de841b8]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de841b8 -&gt; 0x7fdc9de84228]: tracemem[0x7fdc9de84228 -&gt; 0x7fdc9de84298]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de84298 -&gt; 0x7fdc9de84308]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de84308 -&gt; 0x7fdc9de84378]: tracemem[0x7fdc9de84378 -&gt; 0x7fdc9de843e8]: [[&lt;-.data.frame [[&lt;- tracemem[0x7fdc9de843e8 -&gt; 0x7fdc9de84458]: [[&lt;-.data.frame [[&lt;- When we run tracemem on the for loop above we see each column is copied twice followed by the [[&lt;-.data.frame [[&lt;-, the stack trace showing exactly where the duplication occurred. So what is [[&lt;-.data.frame? It’s a function! By looking at `?[[&lt;-.data.frame we see this is used to “extract or replace subsets of data frames.” When we write x[[i]] &lt;- value, it’s really shorthand for calling the function [[&lt;-.data.frame with inputs x, i, and value. Now let’s step into the call of this base function by running debug(``[[&lt;-.data.frame``): debug(`[[&lt;-.data.frame`) and once inside, use tracemem() to find where the new values are assigned to the column: function (x, i, j, value) { if (!all(names(sys.call()) %in% c(&quot;&quot;, &quot;value&quot;))) warning(&quot;named arguments are discouraged&quot;) cl &lt;- oldClass(x) # this is where another copy of x is made! class(x) &lt;- NULL # tracemem[0x7fdc9d852a18 -&gt; 0x7fdc9c99cc08]: nrows &lt;- .row_names_info(x, 2L) if (is.atomic(value) &amp;&amp; !is.null(names(value))) names(value) &lt;- NULL if (nargs() &lt; 4L) { nc &lt;- length(x) if (!is.null(value)) { N &lt;- NROW(value) if (N &gt; nrows) stop(sprintf(ngettext(N, &quot;replacement has %d row, data has %d&quot;, &quot;replacement has %d rows, data has %d&quot;), N, nrows), domain = NA) if (N &lt; nrows) if (N &gt; 0L &amp;&amp; (nrows%%N == 0L) &amp;&amp; length(dim(value)) &lt;= 1L) value &lt;- rep(value, length.out = nrows) else stop(sprintf(ngettext(N, &quot;replacement has %d row, data has %d&quot;, &quot;replacement has %d rows, data has %d&quot;), N, nrows), domain = NA) } x[[i]] &lt;- value if (length(x) &gt; nc) { nc &lt;- length(x) if (names(x)[nc] == &quot;&quot;) names(x)[nc] &lt;- paste0(&quot;V&quot;, nc) names(x) &lt;- make.unique(names(x)) } class(x) &lt;- cl return(x) } if (missing(i) || missing(j)) stop(&quot;only valid calls are x[[j]] &lt;- value or x[[i,j]] &lt;- value&quot;) rows &lt;- attr(x, &quot;row.names&quot;) nvars &lt;- length(x) if (n &lt;- is.character(i)) { ii &lt;- match(i, rows) n &lt;- sum(new.rows &lt;- is.na(ii)) if (n &gt; 0L) { ii[new.rows] &lt;- seq.int(from = nrows + 1L, length.out = n) new.rows &lt;- i[new.rows] } i &lt;- ii } if (all(i &gt;= 0L) &amp;&amp; (nn &lt;- max(i)) &gt; nrows) { if (n == 0L) { nrr &lt;- (nrows + 1L):nn if (inherits(value, &quot;data.frame&quot;) &amp;&amp; (dim(value)[1L]) &gt;= length(nrr)) { new.rows &lt;- attr(value, &quot;row.names&quot;)[seq_len(nrr)] repl &lt;- duplicated(new.rows) | match(new.rows, rows, 0L) if (any(repl)) new.rows[repl] &lt;- nrr[repl] } else new.rows &lt;- nrr } x &lt;- xpdrows.data.frame(x, rows, new.rows) rows &lt;- attr(x, &quot;row.names&quot;) nrows &lt;- length(rows) } iseq &lt;- seq_len(nrows)[i] if (anyNA(iseq)) stop(&quot;non-existent rows not allowed&quot;) if (is.character(j)) { if (&quot;&quot; %in% j) stop(&quot;column name \\&quot;\\&quot; cannot match any column&quot;) jseq &lt;- match(j, names(x)) if (anyNA(jseq)) stop(gettextf(&quot;replacing element in non-existent column: %s&quot;, j[is.na(jseq)]), domain = NA) } else if (is.logical(j) || min(j) &lt; 0L) jseq &lt;- seq_along(x)[j] else { jseq &lt;- j if (max(jseq) &gt; nvars) stop(gettextf(&quot;replacing element in non-existent column: %s&quot;, jseq[jseq &gt; nvars]), domain = NA) } if (length(iseq) &gt; 1L || length(jseq) &gt; 1L) stop(&quot;only a single element should be replaced&quot;) x[[jseq]][[iseq]] &lt;- value # here is where x is copied again! class(x) &lt;- cl # tracemem[0x7fdc992ae9d8 -&gt; 0x7fdc9be55258]: x } Thus seeing exactly where the three copies are happening! "],
["vectors.html", "Chapter 3 Vectors 3.2.1 Scalars 3.2.3 Missing values 3.2.4 Testing and coercion 3.3.1 Setting Attributes 3.3.2 setNames 3.3.3 Dimensions 3.4 S3 atomic vectors 3.4.2 Dates 3.5.1 Lists 3.6.8 Data frames and tibbles Conclusion", " Chapter 3 Vectors 3.2.1 Scalars Can you have NA in vector Hell yeah! 3.2.3 Missing values NA is a ‘sentinel’ value for explicit missingness - what does ‘sentinel’ mean? A sentinel value (also referred to as a flag value, trip value, rogue value, signal value, or dummy data) is a special value in the context of an algorithm which uses its presence as a condition of termination. Also worth noting two NAs are not equal to each other! For instance, in C++ there’s a special character to identify the end of a string I think another example of a sentinel value might be in surveys where you sometimes see missing data or N/A coded as 999, or 9999 (or maybe just 9) Another example of a sentinel value might be in surveys where you sometimes see missing data or N/A coded as 999, or 9999 (or maybe just 9). The possible values in a column of data might be: factor(c(1,1,1,1,2,3,3,4,4,9), levels = c(1,2,3,4,9)) Sentinels are typically employed in situations where it’s easier/preferable to have a collection of values of the same type - represented internally using the same conventions and requiring the same amount of memory - but you also need a way to indicate a special circumstance. So like in the case of survey data you may, for example, see a variable indicating that an individual is 999 years old but the correct way to interpret that is that the data was not collected. 3.2.4 Testing and coercion Why does the book warn us against using is.vector(), is.atomic() and is.numeric()? [read docs] is.atomic will also return true if NULL is.numeric tests if integer or double NOT factor, Date, POSIXt, difftime is.vector will return false if it has attributes other than names 3.3.1 Setting Attributes Working in the medical field I have to import SAS files a lot where the column names have to adhere to specific abbreviations so they’re given a label attribute for their full name. What are some other common uses for attributes? Hypothesis test attributes! 3.3.2 setNames We can use setNames to apply different values to each element in a vector. How do we do this for our own custom attribute? The code below does NOT work! my_vector &lt;- c( structure(1, x = &quot;firstatt_1&quot;), structure(2, x = &quot;firstatt_2&quot;), structure(3, x = &quot;firstatt_3&quot;) ) my_vector &lt;- setNames(my_vector, c(&quot;name_1&quot;, &quot;name_2&quot;, &quot;name_3&quot;)) # mental model: shouldn&#39;t this should return $names and $x? attributes(my_vector) ## $names ## [1] &quot;name_1&quot; &quot;name_2&quot; &quot;name_3&quot; As soon as you instantiate a vector the attributes are lost. BUT we can store it as a list within the vector to keep them! We can create a custom attribute function and use that with map to add a list inside our dataframe: custom_attr &lt;- function(x, my_attr) { attr(x, &quot;x&quot;) &lt;- my_attr return(x) } as_tb &lt;- tibble( one = c(1,2,3), x = c(&quot;att_1&quot;, &quot;att_2&quot;, &quot;att_3&quot;), with_arr = map2(one, x, ~custom_attr(.x, .y)) ) as_tb$with_arr ## [[1]] ## [1] 1 ## attr(,&quot;x&quot;) ## [1] &quot;att_1&quot; ## ## [[2]] ## [1] 2 ## attr(,&quot;x&quot;) ## [1] &quot;att_2&quot; ## ## [[3]] ## [1] 3 ## attr(,&quot;x&quot;) ## [1] &quot;att_3&quot; 3.3.3 Dimensions Because NROW and NCOL don’t return NULL on a one dimensional vector they just seem to me as a more flexible option. When do you have to use ncol and nrow? It may be better practice to always use NROW and NCOL! As long as the number of rows matches the data frame, it’s also possible to have a matrix or array as a column of a data frame. (This requires a slight extension to our definition of a data frame: it’s not the length() of each column that must be equal, but the NROW().) df &lt;- data.frame(x = c(1,2,3,4,5), y = c(letters[1:5])) length(df$y) == NROW(df$y) ## [1] TRUE What’s an example of where length() != NROW() The case of a matrix! my_matrix &lt;- 1:6 dim(my_matrix) &lt;- c(3,2) my_matrix ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 length(my_matrix) == NROW(my_matrix) # 6 != 3 ## [1] FALSE length(my_matrix) == NCOL(my_matrix) # 6 != 2 ## [1] FALSE The length of the matrix is 6, and if we manipulate the dimensions of the matrix we see that the NROW is 3 and and NCOL is 2. 3.4 S3 atomic vectors How is data type typeof() different from class()? Classes are built on top of base types - they’re like special, more specific kinds of types. In fact, if a class isn’t specified then class() will default to either the implicit class or typeof. So Date, POSIXct, and difftime are specific kinds of doubles, falling under its umbrella. lubridate::is.Date(Sys.Date()) ## [1] TRUE is.double(Sys.Date()) ## [1] TRUE lubridate::is.POSIXct(Sys.time()) ## [1] TRUE is.double(Sys.time()) ## [1] TRUE lubridate::is.difftime(as.difftime(c(&quot;0:3:20&quot;, &quot;11:23:15&quot;))) ## [1] TRUE is.double(as.difftime(c(&quot;0:3:20&quot;, &quot;11:23:15&quot;))) ## [1] TRUE But then why does my_factor fail to be recognized under its more general integer umbrella? my_factor &lt;- factor(c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) is.factor(my_factor) ## [1] TRUE is.integer(my_factor) ## [1] FALSE XXX 3.4.2 Dates Why are dates calculated from January 1st, 1970? Unix counts time in seconds since its official “birthday,” – called “epoch” in computing terms – which is Jan. 1, 1970. This article explains that the early Unix engineers picked that date arbitrarily, because they needed to set a uniform date for the start of time, and New Year’s Day, 1970, seemed most convenient. 3.5.1 Lists When should you be using list() instead of c() It’s really contingent on the use case. In the case of adding custom classes it’s worth noting that those are lost once you c() those objects together! 3.6.8 Data frames and tibbles What does ‘lazy’ mean in terms of as_tibble? Technically lazy evaluation means that expressions are not evaluated when they are bound to variables, but their evaluation is deferred until their results are needed by other computations. In this context though we think Hadley just meant that it’s treated as a character if it “looks and smells like a character”. The solution manual gives the answer and notes: df_coltypes &lt;- data.frame( a = c(&quot;a&quot;, &quot;b&quot;), b = c(TRUE, FALSE), c = c(1L, 0L), d = c(1.5, 2), e = c(&quot;one&quot; = 1, &quot;two&quot; = 2), g = factor(c(&quot;f1&quot;, &quot;f2&quot;)), stringsAsFactors = FALSE ) as.matrix(df_coltypes) ## a b c d e g ## one &quot;a&quot; &quot;TRUE&quot; &quot;1&quot; &quot;1.5&quot; &quot;1&quot; &quot;f1&quot; ## two &quot;b&quot; &quot;FALSE&quot; &quot;0&quot; &quot;2.0&quot; &quot;2&quot; &quot;f2&quot; “Note that format() is applied to the characters, which gives surprising results: TRUE is transformed to &quot; TRUE&quot; (starting with a space!).” …But where is the format() call happening? I don’t see a space! After running debug(as.matrix(df_coltypes)) and going down a rabbit hole we found this is a bug that has been addressed! See issue here Conclusion How does vectorization make your code faster Taking the example from Efficient R Programming: VECTORIZED: sum(log(x)) NON-VECTORIZED: s &lt;- 0 for(x0 in x) { s &lt;- s + log(x0) } The vectorized code is faster because it obeys the golden rule of R programming: “access the underlying C/Fortran routines as quickly as possible; the fewer functions calls required to achieve this, the better”. Vectorized Version: sum [called once] log [called once] Non-vectorized: + [called length(x) times] log [called length(x) times] In the vectorised version, there are two primitive function calls: one to log (which performs length(x) steps in the C level) and one to sum (which performs x updates in the C level). So you end up doing a similar number of operations at C level regardless of the route. In the non-vectorised form you are passing the logic back and forth between R and C many many times and this is why the non-vectorised form is much slower. A vectorized function calls primitives directly, but a loop calls each function length(x) times, and there are 1 + length(x) assignments to s. Theres on the order of 3x primitive function calls in the non-vectorised form!! Resources: Check out Jenny Brian’s slides Great article by Noam Ross Putting it all together in a single diagram: "],
["subsetting.html", "Chapter 4 Subsetting 4.1 Introduction 4.2.1 Selecting multiple elements 4.2.2 lists 4.3.1 [[ 4.3.5 Exercise 4.3.3 Missing and OOB 4.5.8 Logical subsetting 4.5.8 Boolean algebra", " Chapter 4 Subsetting 4.1 Introduction &quot;There are three subsetting operators [. [[, $. What is the distinction between an operator and a function? When you look up the help page it brings up the same page for all three extraction methods. What are their distinctions and do their definitions change based on what you’re subsetting? Can we make a table? 4.2.1 Selecting multiple elements Why is numeric(0) “helpful for test data?” This is more of a general comment that one should make sure one’s code doesn’t crash with vectors of zero length (or data frames with zero rows) Why is subsetting with factors “not a good idea” Hadley’s notes seem to say subsetting with factors uses the “integer vector of levels” - and if they all have the same level, it’ll just return the first argument. Subsetting a factor vector leaves the factor levels behind unless you explicitly drop the unused levels 4.2.2 lists We’ve been talking about $ as a shorthand for [[. Using the example list x &lt;- list(1:3, &quot;a&quot;, 4:6) can we use x$1 as shorthand for x[[1]]? The “shorthand” refers to using the name of the vector to extract the vector. If we give 1:3 a name such as test = 1:3 x &lt;- list(named_vector = 1:3, &quot;a&quot;, 4:6) x[[1]] == x$named_vector ## [1] TRUE TRUE TRUE As such, $ is a shorthand for x[[&quot;name_of_vector&quot;]] and not shorthand for x[[index]] 4.3.1 [[ The book states: While you must use [[ when working with lists, I’d also recommend using it with atomic vectors whenever you want to extract a single value. For example, instead of writing: for (i in 2:length(x)) { out[i] &lt;- fun(x[i], out[i - 1]) } It’s better to write for (i in 2:length(x)) { out[[i]] &lt;- fun(x[[i]], out[[i - 1]]) } Why? Can we see this in action by giving x, out, and fun real life values? If we have a vector df_x &lt;- c(&quot;Advanced&quot;,&quot;R&quot;,&quot;Book&quot;,&quot;Club&quot;) We can use [ or [[ to extract the third element of df_x df_x[3] ## [1] &quot;Book&quot; df_x[[3]] ## [1] &quot;Book&quot; But in the case where we want to extract an element from a list [ and [[ no longer give us the same results df_x &lt;- list(A = &quot;Advanced&quot;, B = &quot;R&quot;, C = &quot;Book&quot;, D = &quot;Club&quot;) df_x[3] ## $C ## [1] &quot;Book&quot; df_x[[3]] ## [1] &quot;Book&quot; Because using [[ returns “one element of this vector” in both cases, it makes sense to default to [[ instead of [ since it will reliably return a single element. 4.3.5 Exercise The question asks to describe the upper.tri function - let’s dig into it! x &lt;- outer(1:5, 1:5, FUN = &quot;*&quot;) upper.tri(x) ## [,1] [,2] [,3] [,4] [,5] ## [1,] FALSE TRUE TRUE TRUE TRUE ## [2,] FALSE FALSE TRUE TRUE TRUE ## [3,] FALSE FALSE FALSE TRUE TRUE ## [4,] FALSE FALSE FALSE FALSE TRUE ## [5,] FALSE FALSE FALSE FALSE FALSE We see that it returns the upper triangle of the matrix. But I wanted to walk through how this function actually works and what is meant in the solution manual by leveraging .row(dim(x)) &lt;= .col(dim(x)). # ?upper.tri function (x, diag = FALSE) { d &lt;- dim(x) # if you have an array thats more than 2 dimension # we need to flatten it to a matrix if (length(d) != 2L) d &lt;- dim(as.matrix(x)) if (diag) # this is our subsetting logical! .row(d) &lt;= .col(d) else .row(d) &lt; .col(d) } The function .row() and .col() return a matrix of integers indicating their row number .row(dim(x)) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 1 1 1 1 ## [2,] 2 2 2 2 2 ## [3,] 3 3 3 3 3 ## [4,] 4 4 4 4 4 ## [5,] 5 5 5 5 5 .col(dim(x)) ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 2 3 4 5 ## [2,] 1 2 3 4 5 ## [3,] 1 2 3 4 5 ## [4,] 1 2 3 4 5 ## [5,] 1 2 3 4 5 .row(dim(x)) &lt;= .col(dim(x)) ## [,1] [,2] [,3] [,4] [,5] ## [1,] TRUE TRUE TRUE TRUE TRUE ## [2,] FALSE TRUE TRUE TRUE TRUE ## [3,] FALSE FALSE TRUE TRUE TRUE ## [4,] FALSE FALSE FALSE TRUE TRUE ## [5,] FALSE FALSE FALSE FALSE TRUE Is there a high level meaning to a . before function? Does this refer to internal functions? [see: ?row vs ?.row] Objects in the global environment prefixed with . are hidden in the R (and RStudio) environment panes - so functions prefixed as such are not visible unless you do ls(all=TRUE). Read more here and (here)[https://stackoverflow.com/questions/7526467/what-does-the-dot-mean-in-r-personal-preference-naming-convention-or-more] 4.3.3 Missing and OOB Let’s walk through examples of each LOGICAL ATOMIC c(TRUE, FALSE)[[0]] # zero length # attempt to select less than one element in get1index &lt;real&gt; c(TRUE, FALSE)[[4]] # out of bounds # subscript out of bounds c(TRUE, FALSE)[[NA]] # missing # subscript out of bounds LIST list(1:3, NULL)[[0]] # zero length # attempt to select less than one element in get1index &lt;real&gt; list(1:3, NULL)[[3]] # out of bounds # subscript out of bounds list(1:3, NULL)[[NA]] # missing # NULL NULL NULL[[0]] # zero length # NULL NULL[[1]] # out of bounds # NULL NULL[[NA]] # missing # NULL 4.5.8 Logical subsetting “Remember to use the vector Boolean operators &amp; and |, not the short-circuiting scalar operators &amp;&amp; and ||, which are more useful inside if statements.” Can we go over the difference between &amp; and &amp;&amp; (and | vs ||) I use brute force to figure out which ones I need… &amp;&amp; and || only ever return a single (scalar, length-1 vector) TRUE or FALSE value, whereas | and &amp; return a vector after doing element-by-element comparisons. The only place in R you routinely use a scalar TRUE/FALSE value is in the conditional of an if statement, so you’ll often see &amp;&amp; or || used in idioms like: if (length(x) &gt; 0 &amp;&amp; any(is.na(x))) { do.something() } In most other instances you’ll be working with vectors and use &amp; and | instead. Using &amp;&amp; or || results in some unexpected behavior - which could be a big performance gain in some cases: || will not evaluate the second argument when the first is TRUE &amp;&amp; will not evaluate the second argument when the first is FALSE true_one &lt;- function() { print(&quot;true_one evaluated.&quot;); TRUE} true_two &lt;- function() { print(&quot;true_two evaluated.&quot;); TRUE} # arguments are evaluated lazily. Unexpected behavior can result: c(T, true_one()) &amp;&amp; c(T, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] &quot;true_two evaluated.&quot; ## [1] TRUE c(T, true_one()) &amp;&amp; c(F, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] &quot;true_two evaluated.&quot; ## [1] FALSE c(F, true_one()) &amp;&amp; c(T, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] FALSE c(F, true_one()) &amp;&amp; c(F, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] FALSE c(T, true_one()) || c(T, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] TRUE c(T, true_one()) || c(F, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] TRUE c(F, true_one()) || c(T, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] &quot;true_two evaluated.&quot; ## [1] TRUE c(F, true_one()) || c(F, true_two()) ## [1] &quot;true_one evaluated.&quot; ## [1] &quot;true_two evaluated.&quot; ## [1] FALSE Read more about Special Primatives here 4.5.8 Boolean algebra The unwhich() function takes a boolean and turns it into a numeric - would this ever be useful? How? XXX “x[-which(y)] is not equivalent to x[!y]: if y is all FALSE, which(y) will be integer(0) and -integer(0) is still integer(0), so you’ll get no values, instead of all values.” Can we come up with an example for this plugging in values for x and y c(TRUE, FALSE)[-which(FALSE)] ## logical(0) c(TRUE, FALSE)[!FALSE] ## [1] TRUE FALSE "],
["control-flow.html", "Chapter 5 Control Flow 5.2.2 Vectorised if 5.3 Loops 5.2.3 switch statement 5.3.1 common pitfalls 5.3.3.1 Exercises Conclusion", " Chapter 5 Control Flow 5.2.2 Vectorised if Why does if else print &quot;Out of range&quot; once but ifelse prints it twice? if (sample(1:10, 1) == 1) print(&quot;In range&quot;) else print(&quot;Out of range&quot;) [1] &quot;Out of range&quot; ifelse((sample(1:10, 1) == 1), print(&quot;In range&quot;), print(&quot;Out of range&quot;)) [1] &quot;Out of range&quot; [1] &quot;Out of range&quot; var &lt;- if (sample(1:10, 1) == 1) print(&quot;In range&quot;) var NULL var &lt;- ifelse((sample(1:10, 1) == 1), print(&quot;In range&quot;), print(&quot;Out of range&quot;)) ## [1] &quot;Out of range&quot; var ## [1] &quot;Out of range&quot; ifelse explicitly returns its result, whereas if invisibly returns it! ifelse(c(TRUE, FALSE, TRUE), 1:2, 3) ## [1] 1 3 1 Honestly, ifelse() is weird. Try this too: ifelse(c(TRUE, FALSE, TRUE), 1:10, 3) ## [1] 1 3 3 5.3 Loops Can the body of the loop change the set? my_set &lt;- c(1, 20, 99) for (i in my_set){ if (i==1){ my_set[9]= 20 } print(&quot;hello&quot;) print(my_set) } ## [1] &quot;hello&quot; ## [1] 1 20 99 NA NA NA NA NA 20 ## [1] &quot;hello&quot; ## [1] 1 20 99 NA NA NA NA NA 20 ## [1] &quot;hello&quot; ## [1] 1 20 99 NA NA NA NA NA 20 Looks like you can’t! 5.2.3 switch statement “Closely related to if is the switch() statement. It’s a compact, special purpose equivalent” What is meant here by “special purpose”? Can we come up with a case where you can’t substitute if for switch or the other way around? Use switch. Is it safe to say to switch when you have character inputs (as the book suggests) and use case_when or if for numerics? Switch is special in that only ONE value can be true, as in the case from our presentation the shiny input can only ever be ONE of the strings on the left it cannot be multiple. datasetInput &lt;- reactive({ switch(input$dataset, &quot;materials&quot; = brewing_materials, &quot;size&quot; = brewer_size, &quot;states&quot; = beer_states, &quot;taxed&quot; = beer_taxed) }) 5.3.1 common pitfalls What does the book mean by leveraging vector for preallocating the loop output? How is this different from creating an empty list to instantiate the loop? means &lt;- c(1, 50, 20) out_vector &lt;- vector(&quot;list&quot;, length(means)) for (i in 1:length(means)) { out_vector[[i]] &lt;- rnorm(10, means[[i]]) } out_list &lt;- list() for (i in 1:length(means)) { out_list[[i]] &lt;- rnorm(10, means[[i]]) } By preallocating the length of the out_vector we’re leveraging modify-in-place rather than copy-on-modify. The book warns against using length(x) and suggests using seq_along instead. Is there any downside to using seq_along or a case when you’d prefer length(x) over seq_along(x)? I can’t think of any downsides to using it! We have yet to find a downside but should look into this further! 5.3.3.1 Exercises x &lt;- numeric() out &lt;- vector(&quot;list&quot;, length(x)) for (i in 1:length(x)) { out[i] &lt;- x[i] ^ 2 } out ## [[1]] ## [1] NA I understand that this works because we can count down in a loop - so the first iteration x[1] == NA, and the second x[2] == numeric(0) but where does this value go? Is it just evaluated but not stored since R counts from 1? This question is actually the bigger question, “Can you assign something to index 0 in R?” and it doesn’t seem that you can. Assignment to a valid index mylist = list() mylist[1] &lt;- c(&quot;something&quot;) mylist[1] ## [[1]] ## [1] &quot;something&quot; Assignment to [0] mylist = list() mylist[0] &lt;- c(&quot;something&quot;) mylist[0] ## list() It’s interesting that it’s syntactically correct to assign to mylist[0] but it does nothing! Empty index mylist = list() mylist[1] ## [[1]] ## NULL R defaultly accesses the first layer using [ and says there are no elements in the first layer of mylist and returns NULL. But when you do mylist[[1]] R says Out of Bounds because the first layer of mylist has been called and there is no layer at all. That’s why R throws error in [[ case. Impossible Index [[ mylist = list() mylist[[0]] Error in mylist[[0]] : attempt to select less than one element in get1index &lt;real&gt; [[ isolates one element whereas [ can be used to get subsets of varying sizes. [[ gets precisely one element, no more no less, or it fails. So [[0]]&lt;- cannot work because index zero cannot hold a value. Impossible Index [[&lt;- mylist = list() mylist[[0]] &lt;- &quot;something&quot; Error in mylist[[0]] &lt;- &quot;something&quot; : attempt to select less than one element in integerOneIndex Undefined name Selection using an undefined - but possible name - gives NULL mylist = list() mylist[[&quot;undefined_name&quot;]] Out of Bounds Selection using a possible - but not currently allocated - index gives an out of bounds error mylist = list() mylist[[10]] Error in mylist[[10]] : subscript out of bounds Conclusion Can we put these concepts together in diagram form? Let’s work on improving these schematics! It is also important to note that unlike the other control flow statements, ifelse is vectorized – we can visualize the ifelse logic above operating on each element within a vector: For instance if we can run: ifelse(c(TRUE, FALSE, TRUE), 1:2, 3) ## [1] 1 3 1 Lets break down what’s happening: Create a test answer: test &lt;- c(TRUE, FALSE, TRUE) yes &lt;- 1:2 no &lt;- 3 which indices in the test are TRUE and which are FALSE yes_idx &lt;- which(test) # 1,3 no_idx &lt;- which(!test) # 2 set up our answer answer &lt;- test # T, F, T grow the yes and no answers to the length of the test (input) yes_final &lt;- rep(yes, length.out = length(test)) no_final &lt;- rep(no, length.out = length(test)) fill the answer with yes or no from the enlarged yes/no answers answer[yes_idx] &lt;- yes_final[yes_idx] # 1,1 answer[no_idx] &lt;- no_final[no_idx] # 3 return our final answer: answer ## [1] 1 3 1 Another example: we can run ifelse(c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE), 1:10, &quot;FALSE&quot;) ## [1] &quot;1&quot; &quot;FALSE&quot; &quot;3&quot; &quot;FALSE&quot; &quot;5&quot; &quot;6&quot; we can see that ifelse places the numbers in 1:10 based on their index where our condition is to TRUE and inserts the string &quot;FALSE&quot; whenever the condition is FALSE "],
["references.html", "References", " References "]
]
